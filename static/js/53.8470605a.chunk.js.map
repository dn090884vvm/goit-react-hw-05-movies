{"version":3,"file":"static/js/53.8470605a.chunk.js","mappings":"2TAEMA,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,IAAAA,IAAA,wCAA2CF,IAD7D,cACCG,EADD,yBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,yFACkBH,IAAAA,IAAA,mBAAsBG,EAAtB,oBAAoCL,IADtD,uBACGM,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BF,GAA/B,yFACkBH,IAAAA,IAAA,mBAAsBG,EAAtB,4BAA4CL,IAD9D,uBACGM,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,yFACkBH,IAAAA,IAAA,mBAAsBG,EAAtB,4BAA4CL,IAD9D,uBACGM,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBR,IAAAA,IAAA,kCACMF,EADN,kBACuBU,EADvB,yBADlB,uBACGJ,EADH,EACGA,KADH,kBAIE,CAAEA,KAAAA,IAJJ,kEAtBPJ,IAAAA,SAAAA,QAAyB,4B,6ECDZS,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,MACNC,UAAU,sBAGf,C,sECVYC,E,QAAYC,GAAAA,IAAH,8C,iLCCP,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACjC,OACE,wBACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,0BACGA,EAAKC,cACJ,gBACEC,IAAG,yCAAoCF,EAAKC,cAC5CE,IAAKH,EAAKI,QAGZ,gBAAKF,IAAKG,EAAOF,IAAKH,EAAKI,QAE7B,uBAAIJ,EAAKI,QACT,uBAAIJ,EAAKM,aAVFN,EAAKjB,GADD,KAgBpB,CCdc,SAASwB,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOZ,EAAP,KAAca,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,WAAMP,GAAN,gFAChBK,GAAa,GADG,mBAGS5B,EAAAA,EAAAA,IAAgBuB,GAHzB,gBAGNxB,EAHM,EAGNA,KACR2B,EAAS3B,EAAKgB,MAJA,yEAQda,GAAa,GARC,4EAAH,sDAWfE,EAAUP,EACX,GAAE,CAACA,KAGF,2BACGI,IACC,SAAC,IAAD,WACE,SAACvB,EAAA,EAAD,MAGc,IAAjBS,EAAMkB,QAAe,SAACnB,EAAD,CAAUC,MAAOA,KAAY,sCAGxD,C","sources":["api/api.jsx","components/Loader/Loader.jsx","components/Loader/Loader.styled.jsx","components/CastItem/CastItem.jsx","pages/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '06cf6ee022a0922eb5200ae030143d7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org';\n\nexport async function getTrendingMovies() {\n  const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n  return response;\n}\n\nexport async function getMovieById(id) {\n  const { data } = await axios.get(`/3/movie/${id}?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMovieCredits(id) {\n  const { data } = await axios.get(`/3/movie/${id}/credits?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMovieReviews(id) {\n  const { data } = await axios.get(`/3/movie/${id}/reviews?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMoviesByQuery(searchQuery) {\n  const { data } = await axios.get(\n    `/3/search/movie?api_key=${API_KEY}&query=${searchQuery}&include_adult=false`\n  );\n  return { data };\n}\n","import { Circles } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Circles\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"red\"\n      ariaLabel=\"three-dots-loading\"\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const DivLoader = styled.div`\n  margin-left: 400px;\n`;\n","import image from '../../Images/movieNotFound.jpg';\nimport propTypes from 'prop-types';\n\nexport default function CastItem({ casts }) {\n  return (\n    <ul>\n      {casts.map(cast => (\n        <li key={cast.id}>\n          {cast.profile_path ? (\n            <img\n              src={`https://image.tmdb.org/t/p/w185${cast.profile_path}`}\n              alt={cast.name}\n            />\n          ) : (\n            <img src={image} alt={cast.name} />\n          )}\n          <p>{cast.name}</p>\n          <p>{cast.caracter}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nCastItem.propTypes = {\n  casts: propTypes.arrayOf(propTypes.object).isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport { DivLoader } from 'components/Loader/Loader.styled';\n\nimport { getMovieCredits } from 'api/api';\nimport CastItem from 'components/CastItem/CastItem';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  //   console.log(movieId);\n  const [casts, setCasts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async movieId => {\n      setIsLoading(true);\n      try {\n        const { data } = await getMovieCredits(movieId);\n        setCasts(data.cast);\n        // console.log(data.cast);\n      } catch (error) {\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      {isLoading && (\n        <DivLoader>\n          <Loader />\n        </DivLoader>\n      )}\n      {casts.length !== 0 ? <CastItem casts={casts} /> : <p>No found</p>}\n    </div>\n  );\n}\n"],"names":["API_KEY","getTrendingMovies","axios","response","getMovieById","id","data","getMovieCredits","getMovieReviews","getMoviesByQuery","searchQuery","Loader","height","width","radius","color","ariaLabel","DivLoader","styled","CastItem","casts","map","cast","profile_path","src","alt","name","image","caracter","Cast","movieId","useParams","useState","setCasts","isLoading","setIsLoading","useEffect","fetchCast","length"],"sourceRoot":""}