{"version":3,"file":"static/js/383.f6fd8598.chunk.js","mappings":"4TAEMA,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,IAAAA,IAAA,wCAA2CF,IAD7D,cACCG,EADD,yBAEEA,GAFF,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,yFACkBH,IAAAA,IAAA,mBAAsBG,EAAtB,oBAAoCL,IADtD,uBACGM,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BF,GAA/B,yFACkBH,IAAAA,IAAA,mBAAsBG,EAAtB,4BAA4CL,IAD9D,uBACGM,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,yFACkBH,IAAAA,IAAA,mBAAsBG,EAAtB,4BAA4CL,IAD9D,uBACGM,EADH,EACGA,KADH,kBAEE,CAAEA,KAAAA,IAFJ,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFACkBR,IAAAA,IAAA,kCACMF,EADN,kBACuBU,EADvB,yBADlB,uBACGJ,EADH,EACGA,KADH,kBAIE,CAAEA,KAAAA,IAJJ,kEAtBPJ,IAAAA,SAAAA,QAAyB,4B,6ECDZS,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,MACNC,UAAU,sBAGf,C,sECVYC,E,QAAYC,GAAAA,IAAH,8C,0ICAP,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OACE,kBAAMA,SAAUA,EAAhB,WACE,kBAAOC,KAAK,OAAOC,KAAK,gBAExB,mBAAQD,KAAK,SAAb,sBAGL,C,yBCPYE,GAAkBL,E,QAAAA,IAAOM,EAAAA,GAAPN,CAAH,oI,UCCb,SAASO,EAAT,GAAqC,IAAXC,EAAU,EAAVA,OACjCC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GACV,OACE,yBACE,SAACP,EAAD,CACEQ,GAAE,kBAAaD,EAAMzB,IACrB2B,MAAO,CAAEC,KAAMN,GAFjB,SAIGG,EAAMI,SALFJ,EAAMzB,GASlB,KAGN,C,iCCdc,SAAS8B,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,eAEpCC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAY,CACd,IAAMG,EAAW,mCAAG,6FAClBP,GAAa,GADK,mBAGO9B,EAAAA,EAAAA,IAAiBkC,GAHxB,gBAGRrC,EAHQ,EAGRA,KAER+B,EAAU/B,EAAKyC,SALC,yEAQhBR,GAAa,GARG,4EAAH,qDAWjBO,GACD,CACF,GAAE,CAACH,IAQJ,OACE,UAAC,IAAD,YACE,SAACxB,EAAD,CAAWC,SARM,SAAA4B,GACnBA,EAAMC,iBAENP,EAAgB,CAAEC,WAAYK,EAAME,OAAOC,SAASR,WAAWS,OAChE,IAKId,IACC,SAAC,IAAD,WACE,SAAC3B,EAAA,EAAD,OAGJ,SAACc,EAAD,CAAgBC,OAAQA,MAG7B,C","sources":["api/api.jsx","components/Loader/Loader.jsx","components/Loader/Loader.styled.jsx","components/SearchBar/SearchBar.jsx","components/MovieListQuery/MovieListQuery.styled.jsx","components/MovieListQuery/MovieListQuery.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '06cf6ee022a0922eb5200ae030143d7b';\naxios.defaults.baseURL = 'https://api.themoviedb.org';\n\nexport async function getTrendingMovies() {\n  const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n  return response;\n}\n\nexport async function getMovieById(id) {\n  const { data } = await axios.get(`/3/movie/${id}?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMovieCredits(id) {\n  const { data } = await axios.get(`/3/movie/${id}/credits?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMovieReviews(id) {\n  const { data } = await axios.get(`/3/movie/${id}/reviews?api_key=${API_KEY}`);\n  return { data };\n}\n\nexport async function getMoviesByQuery(searchQuery) {\n  const { data } = await axios.get(\n    `/3/search/movie?api_key=${API_KEY}&query=${searchQuery}&include_adult=false`\n  );\n  return { data };\n}\n","import { Circles } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <Circles\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"red\"\n      ariaLabel=\"three-dots-loading\"\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const DivLoader = styled.div`\n  margin-left: 400px;\n`;\n","import propTypes from 'prop-types';\n\nexport default function SearchBar({ onSubmit }) {\n  return (\n    <form onSubmit={onSubmit}>\n      <input type=\"text\" name=\"searchWord\" />\n\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n\nSearchBar.propTypes = {\n  onSubmit: propTypes.func.isRequired,\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledMovieList = styled(Link)`\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    color: #2196f3;\n  }\n`;\n","import propTypes from 'prop-types';\nimport { StyledMovieList } from './MovieListQuery.styled';\nimport { useLocation } from 'react-router-dom';\n\nexport default function MovieListQuery({ movies }) {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(movie => {\n        return (\n          <li key={movie.id}>\n            <StyledMovieList\n              to={`/movies/${movie.id}`}\n              state={{ from: location }}\n            >\n              {movie.title}\n            </StyledMovieList>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nMovieListQuery.propTypes = {\n  movies: propTypes.arrayOf(propTypes.object).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { getMoviesByQuery } from 'api/api';\nimport MovieListQuery from 'components/MovieListQuery/MovieListQuery';\nimport { Loader } from 'components/Loader/Loader';\nimport { DivLoader } from 'components/Loader/Loader.styled';\nimport { Container } from 'components/MainBar/MainBar.styled';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchWord = searchParams.get('searchWord');\n\n  useEffect(() => {\n    if (searchWord) {\n      const fetchMovies = async () => {\n        setIsLoading(true);\n        try {\n          const { data } = await getMoviesByQuery(searchWord);\n\n          setMovies(data.results);\n        } catch (error) {\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      fetchMovies();\n    }\n  }, [searchWord]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    setSearchParams({ searchWord: event.target.elements.searchWord.value });\n  };\n\n  return (\n    <Container>\n      <SearchBar onSubmit={handleSubmit} />\n      {isLoading && (\n        <DivLoader>\n          <Loader />\n        </DivLoader>\n      )}\n      <MovieListQuery movies={movies} />\n    </Container>\n  );\n}\n"],"names":["API_KEY","getTrendingMovies","axios","response","getMovieById","id","data","getMovieCredits","getMovieReviews","getMoviesByQuery","searchQuery","Loader","height","width","radius","color","ariaLabel","DivLoader","styled","SearchBar","onSubmit","type","name","StyledMovieList","Link","MovieListQuery","movies","location","useLocation","map","movie","to","state","from","title","Movies","useState","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","searchWord","get","useEffect","fetchMovies","results","event","preventDefault","target","elements","value"],"sourceRoot":""}